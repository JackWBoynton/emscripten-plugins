name: Build Plugins & Deploy to Heroku

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    name: Build Linux Plugins
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, ] #, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: update submodules
        run: git submodule update --init --recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Linux Plugin Artifacts for ${{ matrix.arch }}
        run: |
          mkdir -p build/linux-${{ matrix.arch }}
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --target export_artifacts \
            --output "type=local,dest=build/linux-${{ matrix.arch }}" .

      - name: Upload Linux Plugin Artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: plugins-linux-${{ matrix.arch }}
          path: build/linux-${{ matrix.arch }}/**/*.plugin

  build-windows:
    runs-on: windows-2022
    name: Windows MINGW64

    defaults:
      run:
        shell: msys2 {0}

    env:
      CCACHE_DIR: "${{ github.workspace }}/.ccache"

    permissions:
      id-token: write
      attestations: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup ccache
      uses:  hendrikmuhs/ccache-action@v1
      id:    cache-ccache
      with:
        key: ${{ runner.os }}-mingw-ccache-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-mingw-ccache
        max-size: 1G

    - name: Install msys2
      uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64

    - name: Install dependencies
      run: |
        set -x
        scripts/get_deps_mingw.sh

    - name: Configure CMake
      run: |
        set -x
        mkdir -p build/windows
        cd build/windows

        cmake ../..
        cmake --build . --config Release

    - name: Upload Windows Plugin Artifact
      uses: actions/upload-artifact@v4
      with:
        name: plugins-windows
        path: build/windows/*/**.plugin

  build-macos:
    name: Build macOS Plugins
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, ] # , x86_64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: update submodules
        run: git submodule update --init --recursive

      - name: Configure and Build macOS Plugins for ${{ matrix.arch }}
        run: |
          brew install cmake curl glfw3
          mkdir -p build/macos-${{ matrix.arch }}
          cd build/macos-${{ matrix.arch }}
          cmake ../../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
          cmake --build .
          cd ../..
          brew install tree
          tree -a build/macos-${{ matrix.arch }}
      
      - name: Upload macOS Plugin Artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: plugins-macos-${{ matrix.arch }}
          path: build/macos-${{ matrix.arch }}/plugins/macos-*/**/*.plugin

  build-emscripten:
    name: Build Emscripten Plugins
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: update submodules
        run: git submodule update --init --recursive

      - name: Install Emscripten SDK
        run: |
          apt-get update && apt-get install -y python3 git cmake build-essential
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          cd ..
      
      - name: Configure and Build Emscripten Plugins
        run: |
          source ./emsdk/emsdk_env.sh
          mkdir -p build/emscripten
          cd build/emscripten
          emcmake cmake ../../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          emmake make
          cd ../..
      
      - name: Upload Emscripten Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugins-emscripten
          # we only want the .wasms
          path: |
              build/emscripten/*/**.wasm
              build/emscripten/web

  deploy:
    name: Assemble Plugins & Deploy Docker Image to Heroku
    needs:
      - build-linux
      - build-windows
      - build-macos
      - build-emscripten
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download All Plugin Artifacts
        uses: actions/download-artifact@v4
        with:
          path: plugins

      - name: Organize and Combine Plugins
        run: |
          mkdir -p plugins_combined
          tree -a plugins

          # Organize Linux builds (amd64 and arm64)
          for dir in plugins/plugins-linux-amd64 plugins/plugins-linux-arm64; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/artifacts/plugins/* plugins_combined/
            fi
          done

          # Organize Windows build
          if [ -d plugins/plugins-windows ]; then
            cp -r plugins/plugins-windows/artifacts/plugins/* plugins_combined/
          fi

          # Organize macOS builds (x86_64 and arm64)
          for dir in plugins/plugins-macos-x86_64 plugins/plugins-macos-arm64; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/artifacts/plugins/* plugins_combined/
            fi
          done

          # Organize Emscripten build
          if [ -d plugins/plugins-emscripten/artifacts/plugins ]; then
            mkdir -p plugins_combined/emscripten
            cp -r plugins/plugins-emscripten/artifacts/plugins/* plugins_combined/
          fi

          # Copy the combined plugins into the server directory (adjust the path as needed)
          mkdir -p server/plugins
          cp -r plugins_combined/* server/plugins/

          # copy built web dir to server dir
          mkdir -p server/web
          cp -r plugins/plugins-emscripten/web/* server/web/

          tree -a server

      - name: Log in to Heroku Container Registry
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Build and Push Docker Image to Heroku
        # we have to make sure this includes the server directory
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --target server \
            -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web \
            --push .

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Release Container on Heroku
        run: |
          heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}