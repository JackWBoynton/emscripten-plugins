name: Build Plugins & Deploy to Heroku

on:
  push:
    branches:
      - main

jobs:
  build-linux:
    name: Build Linux Plugins
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Linux Plugin Artifacts for ${{ matrix.arch }}
        run: |
          mkdir -p build/linux-${{ matrix.arch }}
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --target build_plugins \
            --output "type=local,dest=build/linux-${{ matrix.arch }}" .

      - name: Upload Linux Plugin Artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: plugins-linux-${{ matrix.arch }}
          path: build/linux-${{ matrix.arch }}

  build-windows:
    name: Build Windows Plugins
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install CMake
        run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
      
      - name: Configure and Build Windows Plugins
        run: |
          mkdir build\windows
          cd build\windows
          cmake .. -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cd ../..
        shell: powershell
      
      - name: Upload Windows Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugins-windows
          path: build/windows

  build-macos:
    name: Build macOS Plugins
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure and Build macOS Plugins for ${{ matrix.arch }}
        run: |
          mkdir -p build/macos-${{ matrix.arch }}
          cd build/macos-${{ matrix.arch }}
          cmake ../../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}
          cmake --build .
          cd ../..
      
      - name: Upload macOS Plugin Artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: plugins-macos-${{ matrix.arch }}
          path: build/macos-${{ matrix.arch }}

  build-emscripten:
    name: Build Emscripten Plugins
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install Emscripten SDK
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          cd ..
      
      - name: Configure and Build Emscripten Plugins
        run: |
          source ./emsdk/emsdk_env.sh
          mkdir -p build/emscripten
          cd build/emscripten
          emcmake cmake ../../ -DCMAKE_BUILD_TYPE=Release
          emmake make
          cd ../..
      
      - name: Upload Emscripten Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugins-emscripten
          path: build/emscripten

  deploy:
    name: Assemble Plugins & Deploy Docker Image to Heroku
    needs:
      - build-linux
      - build-windows
      - build-macos
      - build-emscripten
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download All Plugin Artifacts
        uses: actions/download-artifact@v4
        with:
          path: plugins

      - name: Organize and Combine Plugins
        run: |
          mkdir -p plugins_combined

          # Organize Linux builds (amd64 and arm64)
          for dir in plugins/plugins-linux-amd64 plugins/plugins-linux-arm64; do
            if [ -d "$dir" ]; then
              arch=$(basename "$dir" | sed 's/plugins-linux-//')
              mkdir -p plugins_combined/$arch
              cp -r "$dir"/* plugins_combined/$arch/
            fi
          done

          # Organize Windows build
          if [ -d plugins/plugins-windows ]; then
            mkdir -p plugins_combined/windows
            cp -r plugins/plugins-windows/* plugins_combined/windows/
          fi

          # Organize macOS builds (x86_64 and arm64)
          for dir in plugins/plugins-macos-x86_64 plugins/plugins-macos-arm64; do
            if [ -d "$dir" ]; then
              arch=$(basename "$dir" | sed 's/plugins-macos-//')
              mkdir -p plugins_combined/$arch
              cp -r "$dir"/* plugins_combined/$arch/
            fi
          done

          # Organize Emscripten build
          if [ -d plugins/plugins-emscripten ]; then
            mkdir -p plugins_combined/emscripten
            cp -r plugins/plugins-emscripten/* plugins_combined/emscripten/
          fi

          # Copy the combined plugins into the server directory (adjust the path as needed)
          mkdir -p server/plugins
          cp -r plugins_combined/* server/plugins/

      - name: Log in to Heroku Container Registry
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Build and Push Docker Image to Heroku
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web \
            --push .
